# creating gradient descent 
function [theta, J_history] = gradientDescent(X, y, theta, alpha, num_iters)
%GRADIENTDESCENT Performs gradient descent to learn theta
%   theta = GRADIENTDESENT(X, y, theta, alpha, num_iters) updates theta by 
%   taking num_iters gradient steps with learning rate alpha

% Initialize some useful values
m = length(y); % number of training examples
J_history = zeros(num_iters, 1);

for iter = 1:num_iters

    % ====================== YOUR CODE HERE ======================
    % Instructions: Perform a single gradient step on the parameter vector
    %               theta. 
    %
    % Hint: While debugging, it can be useful to print out the values
    %       of the cost function (computeCost) and gradient here.
    %
	
	%h= theta*X-y;
	%J= sum((X*(theta)-y).^2)/2/m;
%theta=zeros(2,1);
%theta= theta- alpha*(1/m)*((h)*X');
alpha= 0.01;
num_iters= 1500;
%d = (1/m) * X' * (X*theta - y);       % sum i = 0 to m goes away!
%theta = theta - alpha * d
theta= theta- alpha* (1./m)*(X'*(X*theta-y));



    % ============================================================

    % Save the cost J in every iteration    
    J_history(iter) = computeCost(X, y, theta);

end

end

